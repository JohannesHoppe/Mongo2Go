name: Continuous Integration

on: push

env:
  Configuration: Release
  ContinuousIntegrationBuild: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  package:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    name: Run tests and create NuGet package
    outputs:
      version: ${{ steps.dotnet-pack.outputs.version }}
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Retrieve cached NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      - name: Restore NuGet packages
        run: dotnet restore --verbosity normal
      - name: Build solution
        run: dotnet build --configuration ${{ env.Configuration }} --verbosity normal
      - name: Run tests
        run: dotnet test --configuration ${{ env.Configuration }} --no-build --verbosity normal
      - name: Create NuGet package
        run: dotnet pack --output ./artifacts --configuration ${{ env.Configuration }} --no-build --verbosity normal
        id: dotnet-pack
      - name: Debug package output
        run: ls -R ./artifacts
      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v3
        with:
          name: nupkg-artifacts-${{ matrix.os }}
          path: ./artifacts/*.nupkg
  publish:
    runs-on: macos-latest
    needs: package
    if: startsWith(github.ref, 'refs/tags/')
    name: Publish NuGet package and create GitHub release
    steps:
      - name: Download NuGet package artifact
        uses: actions/download-artifact@v3
        with:
          name: nupkg-artifacts-macos-latest
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.package.outputs.version }}
          release_name: Version ${{ needs.package.outputs.version }}
          body: |
            Release version ${{ needs.package.outputs.version }}. Automatically generated.
          draft: false
          prerelease: ${{ contains(needs.package.outputs.version, '-') }}
      - name: Publish NuGet package on nuget.org
        run: dotnet nuget push ./artifacts/*.nupkg --source https://api.nuget.org/v3/index.json --api-key "${{ secrets.NUGET_API_KEY }}"
